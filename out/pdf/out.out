\BOOKMARK [0][]{Cover.0}{Cover}{}% 1
\BOOKMARK [0][]{chapter.1}{1 Introduction}{}% 2
\BOOKMARK [1][]{section*.2}{1.1 Contributions}{chapter.1}% 3
\BOOKMARK [0][]{chapter.2}{2 Related Work}{}% 4
\BOOKMARK [1][]{section*.4}{2.1 Parallel Haskells}{chapter.2}% 5
\BOOKMARK [1][]{section*.5}{2.2 Algorithmic skeletons}{chapter.2}% 6
\BOOKMARK [1][]{section*.6}{2.3 Arrows}{chapter.2}% 7
\BOOKMARK [2][]{section*.7}{2.3.1 Arrows in other languages}{section*.6}% 8
\BOOKMARK [0][]{chapter.3}{3 Background}{}% 9
\BOOKMARK [1][]{section*.9}{3.1 Functional Programming}{chapter.3}% 10
\BOOKMARK [2][]{section*.10}{3.1.1 Why Functional Programming?}{section*.9}% 11
\BOOKMARK [2][]{section*.11}{3.1.2 A Short introduction to Haskell}{section*.9}% 12
\BOOKMARK [2][]{section*.16}{3.1.3 Monads}{section*.9}% 13
\BOOKMARK [2][]{section*.17}{3.1.4 Arrows}{section*.9}% 14
\BOOKMARK [1][]{section*.21}{3.2 Short introduction to parallel Haskells}{chapter.3}% 15
\BOOKMARK [2][]{section*.23}{3.2.1 Glasgow parallel Haskell \205 GpH}{section*.21}% 16
\BOOKMARK [2][]{section*.25}{3.2.2 \040Monad}{section*.21}% 17
\BOOKMARK [2][]{section*.27}{3.2.3 Eden}{section*.21}% 18
\BOOKMARK [0][]{chapter.4}{4 Parallel Arrows}{}% 19
\BOOKMARK [1][]{section*.29}{4.1 The type class}{chapter.4}% 20
\BOOKMARK [1][]{section*.30}{4.2 \040instances}{chapter.4}% 21
\BOOKMARK [2][]{section*.31}{4.2.1 Glasgow parallel Haskell}{section*.30}% 22
\BOOKMARK [2][]{section*.33}{4.2.2 \040Monad}{section*.30}% 23
\BOOKMARK [2][]{section*.35}{4.2.3 Eden}{section*.30}% 24
\BOOKMARK [2][]{section*.37}{4.2.4 Default configuration instances}{section*.30}% 25
\BOOKMARK [1][]{section*.38}{4.3 Extending the interface}{chapter.4}% 26
\BOOKMARK [2][]{section*.39}{4.3.1 Lazy }{section*.38}% 27
\BOOKMARK [2][]{section*.42}{4.3.2 Heterogeneous tasks}{section*.38}% 28
\BOOKMARK [1][]{section*.44}{4.4 Basic -based skeletons}{chapter.4}% 29
\BOOKMARK [2][]{section*.45}{4.4.1 Parallel and laziness}{section*.44}% 30
\BOOKMARK [2][]{section*.49}{4.4.2 Statically load-balancing parallel }{section*.44}% 31
\BOOKMARK [0][]{chapter.5}{5 Further development of Parallel Arrows}{}% 32
\BOOKMARK [1][]{section*.51}{5.1 Futures}{chapter.5}% 33
\BOOKMARK [1][]{section*.57}{5.2 Advanced topological skeletons}{chapter.5}% 34
\BOOKMARK [2][]{section*.58}{5.2.1 Parallel pipe}{section*.57}% 35
\BOOKMARK [2][]{section*.62}{5.2.2 Ring skeleton}{section*.57}% 36
\BOOKMARK [2][]{section*.65}{5.2.3 Torus skeleton}{section*.57}% 37
\BOOKMARK [0][]{chapter.6}{6 Experiment: Cloud Haskell Backend}{}% 38
\BOOKMARK [1][]{section*.72}{6.1 Node discovery and program harness}{chapter.6}% 39
\BOOKMARK [2][]{section*.73}{6.1.1 The data-structure}{section*.72}% 40
\BOOKMARK [2][]{section*.74}{6.1.2 Starting Slave nodes}{section*.72}% 41
\BOOKMARK [2][]{section*.75}{6.1.3 Starting Master nodes}{section*.72}% 42
\BOOKMARK [2][]{section*.76}{6.1.4 Startup harness}{section*.72}% 43
\BOOKMARK [1][]{section*.77}{6.2 Parallel Evaluation with Cloud Haskell}{chapter.6}% 44
\BOOKMARK [1][]{section*.78}{6.3 s}{chapter.6}% 45
\BOOKMARK [1][]{section*.79}{6.4 Circular skeletons and issues with Laziness}{chapter.6}% 46
\BOOKMARK [0][]{chapter.7}{7 Performance results and discussion}{}% 47
\BOOKMARK [1][]{section*.81}{7.1 Measurement platform}{chapter.7}% 48
\BOOKMARK [2][]{section*.82}{7.1.1 Hardware and software}{section*.81}% 49
\BOOKMARK [2][]{section*.83}{7.1.2 Benchmarks}{section*.81}% 50
\BOOKMARK [2][]{section*.84}{7.1.3 What parallel Haskells run where}{section*.81}% 51
\BOOKMARK [1][]{section*.85}{7.2 Benchmark results}{chapter.7}% 52
\BOOKMARK [2][]{section*.86}{7.2.1 Defining overhead}{section*.85}% 53
\BOOKMARK [2][]{section*.87}{7.2.2 Shared memory}{section*.85}% 54
\BOOKMARK [2][]{section*.88}{7.2.3 Distributed memory}{section*.85}% 55
\BOOKMARK [1][]{section*.90}{7.3 Discussion}{chapter.7}% 56
\BOOKMARK [0][]{chapter.8}{8 Discussion}{}% 57
\BOOKMARK [0][]{chapter.9}{9 Conclusion}{}% 58
\BOOKMARK [1][]{section*.93}{9.1 Future work}{chapter.9}% 59
\BOOKMARK [0][]{chapter.10}{10 Appendix}{}% 60
\BOOKMARK [1][]{section*.95}{10.1 Utility Arrows}{chapter.10}% 61
\BOOKMARK [1][]{section*.99}{10.2 Profunctor Arrows}{chapter.10}% 62
\BOOKMARK [1][]{section*.101}{10.3 Additional function definitions}{chapter.10}% 63
\BOOKMARK [1][]{section*.115}{10.4 Syntactic sugar}{chapter.10}% 64
\BOOKMARK [1][]{section*.116}{10.5 Experimental Cloud Haskell backend code}{chapter.10}% 65
\BOOKMARK [1][]{section*.119}{10.6 Plots for the shared memory benchmarks}{chapter.10}% 66
\BOOKMARK [1][]{section*.134}{10.7 Plots for the distributed memory benchmarks}{chapter.10}% 67
\BOOKMARK [0][]{section*.142}{References}{}% 68
\BOOKMARK [0][]{section*.142}{List of Figures}{}% 69
\BOOKMARK [0][]{section*.142}{List of Tables}{}% 70
